{"version":3,"sources":["images/naAmericaLogo.png","components/Logo.jsx","components/MyNavLink.jsx","components/MyNavLinks.jsx","components/MyHeader.jsx","views/EmersonDev.jsx","Constants.js","components/TopicBar.jsx","components/Topic.jsx","views/NaAmerica.jsx","views/IosApps.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","logoSrc","logoName","className","style","width","height","src","alt","MyNavLink","linkname","goto","hovercolor","useState","navigate","setNavigate","isHovering","setIsHovering","hoverState","color","onClick","onMouseEnter","onMouseLeave","to","redirectinig","MyNavLinks","headerLinks","linkArr","index","length","push","key","name","linksRender","MyHeader","logoImage","EmersonDev","TopicBar","backgroundColor","borderRadius","marginBottom","Topic","word","fontFamily","NaAmerica","require","IosApps","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47a2dd27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/naAmericaLogo.da3af274.png\";","import React from \"react\";\n\nconst Logo = ({ logoSrc, logoName }) => {\n  return (\n    <div className=\"logo-container\">\n      <img\n        style={{ width: \"80%\", height: \"auto\" }}\n        src={logoSrc}\n        alt={logoName}\n      />\n    </div>\n  );\n};\nexport default Logo;\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\n\nconst MyNavLink = ({ linkname, goto, hovercolor }) => {\n  const [navigate, setNavigate] = useState(false);\n  const [isHovering, setIsHovering] = useState(false);\n\n  const redirectinig = () => {\n    if (navigate) {\n      return <Redirect to={goto} />;\n    }\n  };\n\n  const styleLink = {\n    color: \"black\"\n  };\n\n  const hoverState = {\n    color: hovercolor\n  };\n\n  return (\n    <div\n      className=\"nav-link\"\n      style={isHovering ? hoverState : styleLink}\n      onClick={() => setNavigate(true)}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      {redirectinig()}\n      <h1>{linkname}</h1>\n    </div>\n  );\n};\n\nexport default MyNavLink;\n","import React from \"react\";\nimport MyNavLink from \"./MyNavLink\";\n\nconst MyNavLinks = ({ headerLinks, hovercolor }) => {\n  // render all links\n  const linksRender = () => {\n    let linkArr = [];\n\n    for (let index = 0; index < headerLinks.length; index++) {\n      linkArr.push(\n        <MyNavLink\n          key={headerLinks[index].name}\n          linkname={headerLinks[index].name}\n          goto={headerLinks[index].goto}\n          hovercolor={hovercolor}\n        />\n      );\n    }\n    return linkArr;\n  };\n\n  return <div className=\"nav-links-container\">{linksRender()}</div>;\n};\n\nexport default MyNavLinks;\n","import React from \"react\";\n\nimport \"../css/HeaderCSS.css\";\n\nimport Logo from \"./Logo\";\nimport MyNavLinks from \"./MyNavLinks\";\n\nconst MyHeader = ({ headerLinks, logoImage, logoName, hovercolor }) => {\n  // return\n  return (\n    <div className=\"header-class\">\n      <Logo logoSrc={logoImage} logoName={logoName} />\n      <MyNavLinks headerLinks={headerLinks} hovercolor={hovercolor} />\n    </div>\n  );\n};\n\nexport default MyHeader;\n","import React from \"react\";\n//import Footer from \"../components/Footer\";\nimport Header from \"../components/MyHeader\";\n\nimport { CONTACT, IOSAPPS, CONCEPTS } from \"../Constants\";\n\nconst EmersonDev = () => {\n  let headerLinks = [\n    { name: IOSAPPS, goto: \"/iosapps\" },\n    { name: CONTACT, goto: \"\" },\n    { name: CONCEPTS, goto: \"\" },\n  ];\n\n  return (\n    <div>\n      <Header headerLinks={headerLinks} />\n      <br />\n      Emerson Dev\n      <br />\n      {/* <Footer /> */}\n    </div>\n  );\n};\n\nexport default EmersonDev;\n","export const AZULCOLOR = \"#4334E9\"\n\n// Emerson Dev links\nexport const IOSAPPS = \"iOS Apps\"\nexport const CONTACT = \"Contact\"\nexport const CONCEPTS = \"Concepts\"\n\n// Na America Nav Links\nexport const SUPPORT = \"Support\"\nexport const POLICY = \"Private Policy\"\n\n\n","import React from \"react\";\n\nconst TopicBar = ({ color }) => {\n  return (\n    <div\n      style={{\n        backgroundColor: color ? color : \"black\",\n        width: \"140px\",\n        height: \"3px\",\n        borderRadius: \"2px\",\n        marginBottom: \"10px\"\n      }}\n    ></div>\n  );\n};\n\nexport default TopicBar;\n","import React from \"react\";\nimport TopicBar from \"./TopicBar\";\n\nconst Topic = ({ word, color }) => {\n  return (\n    <div>\n      <h1 style={{ marginBottom: \"10px\", fontFamily: \"cursive\" }}>{word}</h1>\n      <TopicBar color={color} />\n    </div>\n  );\n};\nexport default Topic;\n","import React from \"react\";\n\nimport TopicBar from \"../components/TopicBar\";\n\nimport MyHeader from \"../components/MyHeader\";\n\nimport { POLICY, SUPPORT, AZULCOLOR } from \"../Constants\";\nimport Topic from \"../components/Topic\";\n\nconst NaAmerica = () => {\n  let headerLinks = [\n    { name: POLICY, goto: \"\" },\n    { name: SUPPORT, goto: \"\" },\n  ];\n\n  return (\n    <div>\n      <MyHeader\n        headerLinks={headerLinks}\n        logoImage={require(\"../images/naAmericaLogo.png\")}\n        logoName=\"Na America\"\n        hovercolor={AZULCOLOR}\n      />\n\n      <Topic word=\"Support\" color={AZULCOLOR} />\n      <Topic word=\"Support\" color={AZULCOLOR} />\n      <Topic word=\"Support\" color={AZULCOLOR} />\n      \n    </div>\n  );\n};\n\nexport default NaAmerica;\n","import React from 'react'\nimport MyNavLink from '../components/MyNavLink'\n\nconst IosApps = () => {\n    return <div>\n        IosApps\n        <MyNavLink linkname=\"Na America\" goto=\"/naamerica\" />\n    </div>\n}\n\nexport default IosApps","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./css/reset.css\";\nimport \"./App.css\"\nimport \"./css/LinkGeneral.css\";\n\nimport EmersonDev from \"./views/EmersonDev\";\nimport NaAmerica from \"./views/NaAmerica\";\nimport IosApps from \"./views/IosApps\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={EmersonDev} />\n\n        <Route path=\"/iosapps\" component={IosApps} />\n        <Route path=\"/naamerica\" component={NaAmerica} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}