{"version":3,"sources":["components/NavLink.jsx","components/Logo.jsx","components/Header.jsx","views/EmersonDev.jsx","Constants.js","views/NaAmerica.jsx","App.js","serviceWorker.js","index.js"],"names":["NavLink","linkname","goto","useState","navigate","setNavigate","className","style","fontWeight","fontSize","cursor","padding","float","margin","onClick","console","log","to","redirectinig","Logo","logoSrc","logoName","src","alt","Header","headerLinks","linkArr","index","length","push","key","name","linksRender","EmersonDev","NaAmerica","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTAgCeA,EA7BC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAAW,EACNC,oBAAS,GADH,mBAC/BC,EAD+B,KACrBC,EADqB,KAUtC,OACE,yBACEC,UAAU,WACVC,MAAO,CACLC,WAAY,OACZC,SAAU,OACVC,OAAQ,UACRC,QAAS,MACTC,MAAO,OACPC,OAAQ,OAEVC,QAAS,kBAAMT,GAAY,KAlBV,WACnB,GAAID,EAEF,OADAW,QAAQC,IAAI,WAAYd,GACjB,kBAAC,IAAD,CAAUe,GAAIf,IAiBpBgB,GACD,4BAAKjB,KClBIkB,G,MAPF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACvB,OACE,6BACE,yBAAKC,IAAKF,EAASG,IAAKF,OC6BfG,EA3BA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAkBhB,OACE,yBAAKnB,UAAU,gBACb,kBAAC,EAAD,CAAMc,QAAQ,4BAA4BC,SAAS,gBAlBnC,WAGlB,IAFA,IAAIK,EAAU,GAELC,EAAQ,EAAGA,EAAQF,EAAYG,OAAQD,IAC9CD,EAAQG,KACN,kBAAC,EAAD,CACEC,IAAKL,EAAYE,GAAOI,KACxB9B,SAAUwB,EAAYE,GAAOI,KAC7B7B,KAAMuB,EAAYE,GAAOzB,QAI/B,OAAOwB,EAQJM,KCJQC,EAnBI,WACjB,IAAIR,EAAc,CAChB,CAAEM,KCNiB,WDMF7B,KAAM,cACvB,CAAE6B,KCNiB,UDMF7B,KAAM,IACvB,CAAE6B,KCNkB,WDMF7B,KAAM,KAG1B,OACE,6BACE,kBAAC,EAAD,CAAQuB,YAAaA,IAErB,6BACA,+BEPSS,EARG,WACd,OAAO,yCAGH,kBAAC,EAAD,CAASjC,SAAS,WCmBXkC,MAff,WACE,OACE,yBAAK7B,UAAU,OAEb,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAM,IAAKC,UAAWL,IAEnC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,aAAaC,UAAWJ,OCR9BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.f3138aa1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst NavLink = ({ linkname, goto }) => {\n  const [navigate, setNavigate] = useState(false);\n\n  const redirectinig = () => {\n    if (navigate) {\n      console.log(\"went to \", goto);\n      return <Redirect to={goto} />;\n    }\n  };\n\n  return (\n    <div\n      className=\"nav-link\"\n      style={{\n        fontWeight: \"bold\",\n        fontSize: \"14px\",\n        cursor: \"pointer\",\n        padding: \"5px\",\n        float: \"left\",\n        margin: \"2px\",\n      }}\n      onClick={() => setNavigate(true)}\n    >\n      {redirectinig()}\n      <h1>{linkname}</h1>\n    </div>\n  );\n};\n\nexport default NavLink;\n","import React from \"react\";\n\nconst Logo = ({ logoSrc, logoName }) => {\n  return (\n    <div>\n      <img src={logoSrc} alt={logoName} />\n    </div>\n  );\n};\nexport default Logo;\n","import React from \"react\";\nimport NavLink from \"./NavLink\";\n\nimport \"../css/HeaderCSS.css\";\n\nimport Logo from \"./Logo\";\n\nconst Header = ({ headerLinks }) => {\n  // render all links\n  const linksRender = () => {\n    let linkArr = [];\n\n    for (let index = 0; index < headerLinks.length; index++) {\n      linkArr.push(\n        <NavLink\n          key={headerLinks[index].name}\n          linkname={headerLinks[index].name}\n          goto={headerLinks[index].goto}\n        />\n      );\n    }\n    return linkArr;\n  };\n\n  // return\n  return (\n    <div className=\"header-class\">\n      <Logo logoSrc=\"./imgz/logos/lacounty.png\" logoName=\"Emerson DEV\" />\n\n      {linksRender()}\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n//import Footer from \"../components/Footer\";\nimport Header from \"../components/Header\";\n\nimport { CONTACT, IOSAPPS, CONCEPTS } from \"../Constants\";\n\nconst EmersonDev = () => {\n  let headerLinks = [\n    { name: IOSAPPS, goto: \"/naamerica\" },\n    { name: CONTACT, goto: \"\" },\n    { name: CONCEPTS, goto: \"\" },\n  ];\n\n  return (\n    <div>\n      <Header headerLinks={headerLinks} />\n\n      <br />\n      <br />\n\n      {/* <Footer /> */}\n    </div>\n  );\n};\n\nexport default EmersonDev;\n","\n// links\nexport const IOSAPPS = \"iOS Apps\"\nexport const CONTACT = \"Contact\"\nexport const CONCEPTS = \"Concepts\"\n\n\n","import React from 'react'\nimport NavLink from '../components/NavLink'\n\nconst NaAmerica = () => {\n    return <div>\n        NaAmerica\n\n        <NavLink linkname=\"Test\" />\n    </div>\n}\n\nexport default NaAmerica","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n//import createHistory from 'history/createBrowserHistory';\n\n\nimport \"./css/reset.css\";\nimport \"./css/LinkGeneral.css\";\n\nimport EmersonDev from \"./views/EmersonDev\";\nimport NaAmerica from \"./views/NaAmerica\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Router >\n\n      \n        <Route exact path={'/'} component={EmersonDev} />\n\n        <Route exact path=\"/naamerica\" component={NaAmerica} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}